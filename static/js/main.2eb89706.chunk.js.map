{"version":3,"sources":["images/me.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","params","particles","number","value","density","enable","value_area","move","speed","direction","App","react_default","a","createElement","className","id","particles_default","src","require","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sKCIlCC,SAAS,CACbC,UAAW,CACTC,OAAQ,CACNC,MAAO,GACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,MAGhBC,KAAM,CACJF,QAAQ,EACRG,MAAO,EACPC,UAAW,WAiDFC,mLA1CX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,GAAG,gBAC5BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAWE,UAAU,YAAYd,OAAQA,IACzCW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAAhB,uBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4BAAhB,sBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4BAAhB,yBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BAAhB,6BAINH,EAAAC,EAAAC,cAAA,WAASC,UAAU,QAAQC,GAAG,iBAC5BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,YAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,2QAGEH,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAHR,0TAQAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KAAKG,IAAKC,EAAQ,IAAoBC,IAAI,iBApCnDC,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2eb89706.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.6085c23b.jpg\";","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport './App.scss';\n\nconst params = {\n  particles: {\n    number: {\n      value: 80,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    },\n    move: {\n      enable: true,\n      speed: 2,\n      direction: 'none'\n    }\n  },\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\" id=\"home-section\">\n          <nav className=\"navigation\">\n            <ul>\n              <li>home</li>\n              <li>about</li>\n              <li>portfolio</li>\n              <li>contact</li>\n            </ul>\n          </nav>\n          <Particles className=\"particles\" params={params} />\n          <div className=\"box\">\n            <h1 className=\"heading-primary\">\n              <span className=\"heading-primary--main\">Pierce James Morris</span>\n              <span className=\"heading-primary--sub one\">Computer Scientist</span>\n              <span className=\"heading-primary--sub two\">Avid Japanese learner</span>\n              <span className=\"heading-primary--sub three\">Aspiring Web Developer</span>\n            </h1>\n          </div>\n        </header>\n        <section className=\"about\" id=\"about-section\">\n          <div className=\"about-info\">\n            <div className=\"title\">\n              About me\n            </div>\n            <div className=\"text\">\n              I first started my programming venture in 2015 when I first got introduced to the Python programming language, for my A-level computer science course.\n              Initially I was interested in game development where I first developed a 'brick breaker' style game using Pygame.\n              <br /><br />\n              Upon honing my development techniques, I quickly got into web developement. I liked the instant gratification of hosting a website so quickly\n              and it being used almost instantly. Since then I moved onto full-stack javascript development whilst studying a Computer Science degree at the\n              University of Nottingham.\n            </div>\n            <img className=\"me\" src={require('./images/me.jpg')} alt=\"me\" />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}